{
  "meta": {
    "project": "JuriSight: Advanced Legal AI Platform",
    "date": "2025-09-13",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "JuriSight is a comprehensive AI-powered legal document analysis platform designed to streamline legal workflows by providing intelligent document processing, deep AI-powered analysis, collaborative team workspaces with role-based access control, and robust real-time analytics capabilities.",
  "core_goals": [
    "Automate legal document processing with reliable OCR fallback.",
    "Provide intelligent RAG-based query answering using vector similarity search for deep insights.",
    "Enable team collaboration through workspace management with fine-grained role-based access control.",
    "Deliver detailed clause-by-clause document comparison powered by AI with similarity scoring.",
    "Offer comprehensive real-time analytics and monitoring for usage, performance, and system health."
  ],
  "key_features": [
    "JWT-based authentication system supporting user registration, login, logout, profile management, and role-based access control.",
    "Full document lifecycle management including upload, storage, text extraction, AI analysis, categorization, tagging, versioning, and metadata handling.",
    "AI-powered chat interface for interactive document Q&A with session and message history.",
    "Clause-by-clause AI document comparison with similarity scoring and detailed difference highlighting.",
    "Team-based workspace management allowing member roles, permissions, and collaborative document organization.",
    "Comprehensive analytics and monitoring platform providing usage statistics, performance metrics, AI usage, and system health dashboards.",
    "Scalable, containerized deployment architecture using Docker, Nginx, PostgreSQL with vector embedding support, and Redis caching.",
    "Modern frontend built with React, TypeScript, TailwindCSS, Zustand, and React Query for seamless user experience and state management.",
    "Robust testing strategy encompassing unit, integration, and end-to-end tests for both frontend and backend.",
    "CI/CD pipelines enabling automated testing, security scanning, staging deployment, and production rollout."
  ],
  "user_flow_summary": [
    "User registers or logs in via the JWT authentication system with role-based access.",
    "Users upload documents through the frontend, triggering backend text extraction, AI analysis using Google Gemini or OpenAI, and storage of content and embeddings.",
    "Users interact with documents via dashboard with filtering, viewing, annotation, and AI chat features to obtain intelligent insights.",
    "Users create and manage team workspaces with assigned roles and permissions to organize documents collaboratively.",
    "Users perform document comparisons with AI-powered clause-level analysis, viewing similarity scores and detailed difference reports.",
    "Users view real-time analytics dashboards showing usage, performance, AI interactions, and system health data for informed decision-making."
  ],
  "validation_criteria": [
    "Authentication flows correctly enforce security with JWT tokens and RBAC roles.",
    "Document upload and processing pipeline reliably extracts text and stores embeddings with AI analysis results.",
    "AI chat sessions persist messages and provide context-aware, accurate responses based on document content.",
    "Document comparison results are consistent, accurately scoring similarity and highlighting clause differences.",
    "Workspace management APIs enforce user roles and permissions for secure collaboration.",
    "Analytics endpoints return accurate, timely metrics for usage, performance, and AI system health.",
    "Frontend UI state management reliably syncs with backend data stores and APIs.",
    "End-to-end tests validate user flows including registration, document upload, AI interaction, comparison, and analytics.",
    "CI/CD pipeline runs successful automated tests, builds, security scans, and deployments without errors."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React",
      "Express.js",
      "PostgreSQL",
      "Redis",
      "Prisma ORM",
      "JWT Authentication",
      "Google Gemini AI",
      "OpenAI API",
      "Docker",
      "Nginx",
      "Vite",
      "TailwindCSS",
      "Radix UI",
      "Zustand",
      "TanStack Query",
      "Vitest",
      "Jest"
    ],
    "features": [
      {
        "name": "Authentication API",
        "description": "JWT-based authentication system with role-based access control, user registration, login, logout, and profile management",
        "files": [
          "apps/backend/src/routes/authRoutes.ts",
          "apps/backend/src/middleware/authMiddleware.ts",
          "apps/backend/src/utils/jwt.ts",
          "apps/frontend/src/pages/auth/LoginPage.tsx",
          "apps/frontend/src/pages/auth/RegisterPage.tsx",
          "apps/frontend/src/providers/AuthProvider.tsx",
          "apps/frontend/src/stores/authStore.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Authentication API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/auth/login": {
              "post": {
                "summary": "User login",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "format": "email"
                          },
                          "password": {
                            "type": "string",
                            "minLength": 6
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Login successful",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "success": {
                              "type": "boolean"
                            },
                            "data": {
                              "type": "object",
                              "properties": {
                                "user": {
                                  "type": "object"
                                },
                                "accessToken": {
                                  "type": "string"
                                },
                                "refreshToken": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/auth/register": {
              "post": {
                "summary": "User registration",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "format": "email"
                          },
                          "password": {
                            "type": "string",
                            "minLength": 6
                          },
                          "confirmPassword": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/auth/refresh": {
              "post": {
                "summary": "Refresh access token"
              }
            },
            "/api/auth/profile": {
              "get": {
                "summary": "Get user profile",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              },
              "put": {
                "summary": "Update user profile",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/auth/logout": {
              "post": {
                "summary": "User logout",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "Document Management API",
        "description": "Complete document lifecycle management including upload, storage, text extraction, AI analysis, categorization, and metadata management",
        "files": [
          "apps/backend/src/routes/documentRoutes.ts",
          "apps/backend/src/services/DocumentService.ts",
          "apps/backend/src/services/DocumentProcessor.ts",
          "apps/backend/src/services/StorageService.ts",
          "apps/frontend/src/pages/DashboardPage.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Document Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/documents": {
              "get": {
                "summary": "Get documents with filtering and pagination",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "parameters": [
                  {
                    "name": "page",
                    "in": "query",
                    "schema": {
                      "type": "integer",
                      "minimum": 1
                    }
                  },
                  {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 100
                    }
                  },
                  {
                    "name": "search",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "category",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "workspaceId",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "post": {
                "summary": "Upload document",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "multipart/form-data": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "file": {
                            "type": "string",
                            "format": "binary"
                          },
                          "workspaceId": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "category": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/documents/{id}": {
              "get": {
                "summary": "Get document by ID",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              },
              "put": {
                "summary": "Update document metadata",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              },
              "delete": {
                "summary": "Delete document",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/documents/{id}/download": {
              "get": {
                "summary": "Download document",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/documents/{id}/analyze": {
              "post": {
                "summary": "Analyze document with AI",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/documents/{id}/analysis": {
              "get": {
                "summary": "Get document analysis results",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "AI Chat API",
        "description": "AI-powered chat interface for document-based Q&A with session management, message history, and context-aware responses",
        "files": [
          "apps/backend/src/routes/chatRoutes.ts",
          "apps/backend/src/services/ChatService.ts",
          "apps/backend/src/services/AIService.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "AI Chat API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/chat/sessions": {
              "get": {
                "summary": "Get chat sessions",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "parameters": [
                  {
                    "name": "documentId",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "page",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    }
                  },
                  {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    }
                  }
                ]
              },
              "post": {
                "summary": "Create chat session",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "documentId": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/chat/sessions/{id}": {
              "get": {
                "summary": "Get chat session by ID",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              },
              "put": {
                "summary": "Update chat session",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              },
              "delete": {
                "summary": "Delete chat session",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/chat/sessions/{id}/messages": {
              "get": {
                "summary": "Get chat messages for session",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/chat/messages": {
              "post": {
                "summary": "Send chat message",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "sessionId": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Document Comparison API",
        "description": "AI-powered document comparison with similarity scoring, clause-by-clause analysis, and detailed difference highlighting",
        "files": [
          "apps/backend/src/routes/comparisonRoutes.ts",
          "apps/backend/src/services/ComparisonService.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Document Comparison API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/comparisons": {
              "get": {
                "summary": "Get comparisons",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "parameters": [
                  {
                    "name": "page",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    }
                  },
                  {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    }
                  },
                  {
                    "name": "documentId",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              },
              "post": {
                "summary": "Create document comparison",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "doc1Id": {
                            "type": "string"
                          },
                          "doc2Id": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/comparisons/{id}": {
              "get": {
                "summary": "Get comparison by ID",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              },
              "delete": {
                "summary": "Delete comparison",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/comparisons/{id}/analysis": {
              "get": {
                "summary": "Get comparison analysis",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/comparisons/{id}/reanalyze": {
              "post": {
                "summary": "Regenerate comparison analysis",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "Workspace Management API",
        "description": "Team-based workspace management with member roles, permissions, and collaborative document organization",
        "files": [
          "apps/backend/src/routes/workspaceRoutes.ts",
          "apps/frontend/src/stores/workspaceStore.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Workspace Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/workspaces": {
              "get": {
                "summary": "Get user's workspaces",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "parameters": [
                  {
                    "name": "page",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    }
                  },
                  {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                      "type": "integer"
                    }
                  }
                ]
              },
              "post": {
                "summary": "Create workspace",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "settings": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/workspaces/{id}": {
              "get": {
                "summary": "Get workspace by ID",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              },
              "put": {
                "summary": "Update workspace",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              },
              "delete": {
                "summary": "Delete workspace",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            }
          }
        }
      },
      {
        "name": "Analytics API",
        "description": "Comprehensive analytics and monitoring system with usage statistics, performance metrics, and system health monitoring",
        "files": [
          "apps/backend/src/routes/analyticsRoutes.ts",
          "apps/backend/src/services/AnalyticsService.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Analytics API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/analytics/dashboard": {
              "get": {
                "summary": "Get dashboard metrics",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/analytics/usage": {
              "get": {
                "summary": "Get usage statistics",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "parameters": [
                  {
                    "name": "period",
                    "in": "query",
                    "schema": {
                      "type": "string",
                      "enum": [
                        "7d",
                        "30d",
                        "90d",
                        "1y"
                      ]
                    }
                  },
                  {
                    "name": "workspaceId",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "userId",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "/api/analytics/performance": {
              "get": {
                "summary": "Get performance metrics",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "parameters": [
                  {
                    "name": "period",
                    "in": "query",
                    "schema": {
                      "type": "string",
                      "enum": [
                        "7d",
                        "30d",
                        "90d"
                      ]
                    }
                  },
                  {
                    "name": "metric",
                    "in": "query",
                    "schema": {
                      "type": "string",
                      "enum": [
                        "response_time",
                        "processing_time",
                        "error_rate",
                        "throughput"
                      ]
                    }
                  }
                ]
              }
            },
            "/api/analytics/documents": {
              "get": {
                "summary": "Get document analytics",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/analytics/activity": {
              "get": {
                "summary": "Get user activity analytics",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/analytics/ai-usage": {
              "get": {
                "summary": "Get AI usage analytics (admin only)",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/analytics/system-health": {
              "get": {
                "summary": "Get system health metrics (admin only)",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            },
            "/api/analytics/export": {
              "get": {
                "summary": "Export analytics data",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ]
              }
            }
          }
        }
      }
    ]
  }
}
